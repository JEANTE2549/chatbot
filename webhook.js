const fs = require('fs');
const path = require('path');
const line = require('@line/bot-sdk');
const { createClient } = require('@supabase/supabase-js');

const richMenuIds = JSON.parse(
  fs.readFileSync(path.join(__dirname, 'richmenu-ids.json'))
);

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

module.exports = (config) => {
  const client = new line.Client(config);

  async function getPropertiesFromSupabase(area, type) {
  const { data, error } = await supabase
    .from('house_projects')
    .select('name, price, image_url, status, property_type, district, id')
    .eq('status', true)
    .eq('property_type', type)
    .ilike('district', `%${area.trim()}%`)
    .limit(10); 
  if (error) {
    console.error('Supabase error:', error);
    return [];
  }

  return data.map(p => ({
    name: p.name,
    price: `‡∏ø${Number(p.price).toLocaleString()}`,
    image: p.image_url ,
    id: p.id
  }));
}

  async function getAdminFromSupabase() {
  const { data, error } = await supabase
    .from('admin')
    .select('name, tel, img_admin')
    .limit(10); 
  if (error) {
    console.error('Supabase error:', error);
    return [];
  }

  return data.map(a => ({
    name: a.name,
    tel: a.tel,
    img: a.img_admin,
  }));
  }

    return async (req, res) => {
      try {
        await Promise.all(req.body.events.map(async (event) => {
          const userId = event.source.userId;
          const userName = event.source.userName || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ';

          if (event.type === 'postback') {
            const data = new URLSearchParams(event.postback.data);
            const action = data.get('action');

            if (action === 'switch_tab') {
              const menu = data.get('menu');
              const newMenuId = richMenuIds[menu];
              if (newMenuId) {
                return client.linkRichMenuToUser(userId, newMenuId);
              }
            }

            if (action === 'rayong_area') {
              return client.replyMessage(event.replyToken, RayongFlexMessage);
            }
            if (action === 'lampang_area') {
              return client.replyMessage(event.replyToken, LampangFlexMessage);
            }
            if (action === 'linktree_link') {
              return client.replyMessage(event.replyToken, LinktreeFlexMessage);
            }
            if (action === 'consult_me') {
              return client.replyMessage(event.replyToken, ConsultMeFlexMessage);
            }

            if (action === 'reservation_menu') {
              const { data: user, error: userError } = await supabase
                .from('users')
                .select('interest')
                .eq('line_user_id', userId)
                .maybeSingle();

              if (userError || !user?.interest) {
                return client.replyMessage(event.replyToken, {
                  type: 'text',
                  text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞ üè°\n‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Rich Menu ‡∏Ñ‡πà‡∏∞ üòä',
                });
              }
              const rawInterest = user.interest;
              const interestList = rawInterest.split(',').map(name => name.trim());

              if (interestList.length === 0) {
                return client.replyMessage(event.replyToken, {
                  type: 'text',
                  text: '‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ üòÖ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Rich Menu ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞',
                });
              }
              const { data: houses, error: houseError } = await supabase
                .from('house_projects')
                .select('name, price, image_url')
                .in('name', interestList);
              if (houseError || !houses || houses.length === 0) {
                return client.replyMessage(event.replyToken, {
                  type: 'text',
                  text: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πà‡∏∞ üßê',
                });
              }
              const carousel = {
                type: 'template',
                altText: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏î‡∏π',
                template: {
                  type: 'carousel',
                  columns: houses.slice(0, 10).map(house => ({
                    thumbnailImageUrl: house.image_url ,
                    title: house.name.slice(0, 40),
                    text: `‡∏ø${Number(house.price).toLocaleString()}`,
                    actions: [
                      {
                        type: 'message',
                        label: 'üìÖ ‡∏ô‡∏±‡∏î‡∏î‡∏π‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏£‡∏¥‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå',
                        text: `üõñ ‡∏ô‡∏±‡∏î‡∏î‡∏π: ${house.name}`
                      }
                    ]
                  }))
                }
              };
              return client.replyMessage(event.replyToken, carousel);
            }

            if (action === 'consult') {
              const role = data.get('role');
              
              if (role === 'buyer') {
                const { data, error : RoleStuck } = await supabase
                .from('users')
                .upsert({ line_user_id: userId, role: role }, { onConflict: ['line_user_id'] });
                if (RoleStuck) {
                  console.error('Supabase error:', RoleStuck);
                  return client.replyMessage(event.replyToken, {
                    type: 'text',
                    text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏∞ üò¢ \n‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠admin ‡∏°‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡πà‡∏∞'
                  });
                }
                return client.replyMessage(event.replyToken, {
                  type: 'text',
                  text: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞ üòä\n‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞'
                });
              }
              if (role === 'investor') {
                const { data, error : RoleStuck } = await supabase
                .from('users')
                .upsert({ line_user_id: userId, role: role }, { onConflict: ['line_user_id'] });
                if (RoleStuck) {
                  console.error('Supabase error:', RoleStuck);
                  return client.replyMessage(event.replyToken, {
                    type: 'text',
                    text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏∞ üò¢ \n‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠admin ‡∏°‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡πà‡∏∞'
                  });
                }
                return client.replyMessage(event.replyToken, {
                  type: 'text',
                  text: '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏Ñ‡πà‡∏∞! ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏£‡∏¥‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞ üòä\n‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞'
                });
              }
              if (role === 'expat_buyer') {
                const { data, error : RoleStuck } = await supabase
                .from('users')
                .upsert({ line_user_id: userId, role: role }, { onConflict: ['line_user_id'] });
                if (RoleStuck) {
                  console.error('Supabase error:', RoleStuck);
                  return client.replyMessage(event.replyToken, {
                    type: 'text',
                    text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏∞ üò¢ \n‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠admin ‡∏°‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡πà‡∏∞'
                  });
                }
                return client.replyMessage(event.replyToken, {
                  type: 'text',
                  text: 'Welcome! Our admin will contact you soon to assist with your property search in Thailand. üòä\nIn the meantime, feel free to explore the menu below.'
                });
              }
            }
            
            if (action === 'contact_detail') {
              const admin = await getAdminFromSupabase();
              return client.replyMessage(event.replyToken,{
                type: 'template',
                altText: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Admin‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•',
                template: {
                  type: 'carousel',
                  columns: admin.map(a => ({
                    thumbnailImageUrl: a.img,
                    title: a.name.slice(0, 40),
                    text: 'tel: ' + a.tel,
                    actions: [
                    { type: 'uri', label: '‡πÇ‡∏ó‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤', uri: `tel:${a.tel}` }
                  ]
                  }))
                }               
              });
            }

            if (action === 'show_property') {
              const area = data.get('area');
              const{data: area_data , error} = await supabase
              .from('users')
              .update({ area_interest: area })
              .eq('line_user_id', userId);
              return client.replyMessage(event.replyToken, {
                type: 'text',
                text: `‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏´‡∏ô‡πÉ‡∏ô "${area}" ‡∏Ñ‡∏∞?`,
                quickReply: {
                  items: [
                    {
                      type: 'action',
                      action: {
                        type: 'postback',
                        label: '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß',
                        data: 'action=property_type&type=‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß'
                      }
                    },
                    {
                      type: 'action',
                      action: {
                        type: 'postback',
                        label: '‡∏ó‡∏≤‡∏ß‡πå‡∏ô‡πÇ‡∏Æ‡∏°',
                        data: 'action=property_type&type=‡∏ó‡∏≤‡∏ß‡πå‡∏ô‡πÇ‡∏Æ‡∏°'
                      }
                    },
                    {
                      type: 'action',
                      action: {
                        type: 'postback',
                        label: '‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î',
                        data: 'action=property_type&type=‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î'
                      }
                    },
                    {
                      type: 'action',
                      action: {
                        type: 'postback',
                        label: '‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î',
                        data: 'action=property_type&type=‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î'
                      }
                    },
                    {
                      type: 'action',
                      action: {
                        type: 'postback',
                        label: '‡∏≠‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏°‡πâ‡∏ô‡∏ó‡πå',
                        data: 'action=property_type&type=‡∏≠‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏°‡πâ‡∏ô‡∏ó‡πå'
                      }
                    },
                    {
                      type: 'action',
                      action: {
                        type: 'postback',
                        label: '‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô',
                        data: 'action=property_type&type=‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô'
                      }
                    },
                  ]
                }
              });
            }

            if (action === 'property_type') {
              const type = data.get('type');
              const { data: user } = await supabase
                .from('users')
                .select('area_interest')
                .eq('line_user_id', userId)
                .single();
              const area = user?.area_interest;
              const{error} = await supabase
                .from('users')
                .update({ property_type_interest: type })
                .eq('line_user_id', userId);
              if (!area) {
                return client.replyMessage(event.replyToken, {
                  type: 'text',
                  text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏≥‡πÄ‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏∞ üó∫Ô∏è'
                });
              }
              const properties = await getPropertiesFromSupabase(area, type);
              if (!properties || properties.length === 0) {
                return client.replyMessage(event.replyToken, {
                  type: 'text',
                  text: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó "${type}" ‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà "${area}" ‡∏Ñ‡πà‡∏∞ üòî`
                });
              }
            const carouselColumns = properties.map(p => ({
              thumbnailImageUrl: p.image,
              title: p.name.slice(0, 40),
              text: p.price,
              actions: [
                { type: 'message', label: '‡∏™‡∏ô‡πÉ‡∏à', text: `‡∏™‡∏ô‡πÉ‡∏à ${p.name}` },
                { type: 'postback', label: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', data: `action=more_detail&name=${p.name}`},
                { type: 'message', label: '‡πÅ‡∏ä‡∏£‡πå‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå', text: "‡πÅ‡∏ä‡∏£‡πå‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå: " + p.name },
              ]
            }));

            return client.replyMessage(event.replyToken, {
              type: 'template',
              altText: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå',
              template: {
                type: 'carousel',
                columns: carouselColumns
              }
            });
            }

          if (action === 'more_detail') {
            const data = new URLSearchParams(event.postback?.data || '');
            const name = data.get('name');
            const { data: property, error } = await supabase
              .from('house_projects')
              .select('*')
              .eq('name', name)
              .single();

            if (error || !property) {
              return client.replyMessage(event.replyToken, {
                type: 'text',
                text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞'
              });
            }
            const flexMsg = {
              type: 'flex',
              altText: `‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå: ${property.name}`,
              contents: {
                type: 'bubble',
                hero: {
                  type: 'image',
                  url: property.image_url,
                  size: 'full',
                  aspectRatio: '20:13',
                  aspectMode: 'cover'
                },
                body: {
                  type: 'box',
                  layout: 'vertical',
                  spacing: 'md',
                  contents: [
                    {
                      type: 'text',
                      text: property.name,
                      weight: 'bold',
                      size: 'lg',
                      wrap: true
                    },
                    {
                      type: 'box',
                      layout: 'horizontal',
                      contents: [
                        {
                          type: 'text',
                          text: `‡∏ø${Number(property.price).toLocaleString()}`,
                          weight: 'bold',
                          color: '#27ACB2',
                          size: 'md'
                        },
                        {
                          type: 'text',
                          text: property.property_type || '-',
                          weight: 'bold',
                          align: 'end',
                          size: 'sm'
                        }
                      ]
                    },
                    {
                      type: 'box',
                      layout: 'horizontal',
                      spacing: 'sm',
                      margin: 'md',
                      contents: [
                        {
                          type: 'text',
                          text: `‡∏û‡∏ó.${property.area_sqm || '-'} ‡∏ï‡∏£.‡∏°.`,
                          size: 'sm'
                        },
                        {
                          type: 'text',
                          text: `üõè ${property.Bedroom || '-'} ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô`,
                          size: 'sm',
                        },
                        {
                          type: 'text',
                          text: `üõÅ ${property.Bathroom || '-'} ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥`,
                          size: 'sm',
                          align: 'end',
                        }
                      ]
                    },
                    { type: 'separator' },
                    { type: 'text', text: '‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£', weight: 'bold', size: 'sm' },
                    { type: 'text', text: property.location || '-', size: 'sm', wrap: true },
                    { type: 'text', text: `‡πÉ‡∏Å‡∏•‡πâ: ${(property.nearby_area || []).join(', ')}`, size: 'xs', wrap: true },
                    { type: 'text', text: property.map_link|| '-', size: 'xs', color: '#1E90FF', wrap: true },
                    { type: 'separator' },
                    { type: 'text', text: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:', weight: 'bold', size: 'sm' },
                    { type: 'text', text: `${(property.extra_detail || ['-']).join('\n')}`, size: 'xs', wrap: true },
                    { type: 'text', text: `‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å: ${(Array.isArray(property.facilities) ? property.facilities : []).join(', ')}`, size: 'xs', wrap: true },
                    { type: 'separator' },
                    { type: 'text', text: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏°‡πÅ‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô:', weight: 'bold', size: 'sm' },
                    { type: 'text', text: `‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: ${property.promotion || '-'}`, size: 'sm', wrap: true },
                    { type: 'text', text: `‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏°: \n${(property.free_gift || []).join('\n')}`, size: 'xs', wrap: true }
                  ]
                }
              }
            };
            return client.replyMessage(event.replyToken, flexMsg);
          }
          }
          
          if (event.type === 'follow') {
            const profile = await client.getProfile(userId);
            const userName = profile.displayName || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ';
            const replyMessage = [welcomeFlexMessage,ConsignmentFlexMessage];
            await client.replyMessage(event.replyToken, replyMessage);
            const { data, error } = await supabase
              .from('users')
              .upsert(
                { line_user_id: userId, line_user_name: userName },
                { onConflict: ['line_user_id'] }
              );
          }

          if (event.type === 'message' && event.message.type === 'text') {
            const text = event.message.text;
            const userId = event.source.userId;
            const textLower = text.toLowerCase();

            if (text.startsWith('‡πÅ‡∏ä‡∏£‡πå‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå: ')) {
              const propertyId = text.replace('‡πÅ‡∏ä‡∏£‡πå‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå: ', '').trim();
              const LIFFlink = `https://liff.line.me/2007520214-YpaPvNR1/?propertyId=${encodeURIComponent(propertyId)}`
              await client.replyMessage(event.replyToken, {
                type: 'text',
                text: `‡πÅ‡∏ä‡∏£‡πå‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡πÅ‡∏´‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏£‡∏±‡∏Å‡πÉ‡∏ô line ‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞üëá`,
                quickReply: {
                  items: [
                    {
                      type: 'action',
                      action: {
                        type: 'uri',
                        label: '‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô',
                        uri: `https://line.me/R/msg/text/?${encodeURIComponent('‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à! üè† ‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏™‡∏¥: ' + LIFFlink)}`
                      },
                    },
                  ],
                },
              });
            }

            if (text.startsWith('‡∏™‡∏ô‡πÉ‡∏à ')) {
              const interest = text.replace(/‡∏™‡∏ô‡πÉ‡∏à/gi, '').trim();

              const { data: found } = await supabase
                .from('house_projects')
                .select('name')
                .ilike('name', `%${interest}%`)
                .maybeSingle();

              if (!found) {
                return client.replyMessage(event.replyToken, {
                  type: 'text',
                  text: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ "${interest}" ‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`
                });
              }

              const { data: user, error: userError } = await supabase
                .from('users') 
                .select('name, phone, interest')
                .eq('line_user_id', userId)
                .maybeSingle();

              if (userError) {
                console.error('Supabase error:', userError);
                return client.replyMessage(event.replyToken, {
                  type: 'text',
                  text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏∞ üò¢'
                });
              }

              let interests = user?.interest ? user.interest.split(',').map(i => i.trim()) : [];
              if (!interests.includes(found.name)) {
                interests.push(found.name);
              }
              const updatedInterest = interests.join(', ');
              const { error: updateError } = await supabase
                .from('users')
                .upsert({ line_user_id: userId, interest: updatedInterest }, { onConflict: ['line_user_id'] });

              if (updateError) {
                console.error('Supabase error:', updateError);
                return client.replyMessage(event.replyToken, {
                  type: 'text',
                  text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏Ñ‡πà‡∏∞ üò¢'
                });
              }

              if (user?.name && user?.phone) {
                return client.replyMessage(event.replyToken, {
                  type: 'text',
                  text: `‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ "${found.name}" ‡∏Å‡πá‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏°‡∏≤‡∏Å\n‡∏´‡∏≤‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏π‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ üòä`
                },
              );
              }
  
              return client.replyMessage(event.replyToken, {
                type: 'text',
                text: `‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ "${found.name}"\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡πà‡∏∞ üìû\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ 088999777`
              });
            }
            const phoneRegex = /(\d{9,11}|\d{2,4}-\d{3}-\d{3,4}|\d{2,4} \d{6,8}|\d{3} \d{3} \d{4})/;
            const phoneMatch = text.match(phoneRegex);
            if (phoneMatch) {
              let rawPhone = phoneMatch[1];
              const phone = rawPhone.replace(/-/g, '').replace(/ /g, '');
              let name = text
                .replace(/‡∏ä‡∏∑‡πà‡∏≠/gi, '')     
                .replace(/‡πÄ‡∏ö‡∏≠‡∏£‡πå/gi, '')  
                .replace(/‡∏ä‡∏∑‡πà‡∏≠:/gi, '')
                .replace(/‡πÄ‡∏ö‡∏≠‡∏£‡πå:/gi, '')
                .replace(/:/gi, '')
                .replace(rawPhone, '') 
                .trim();

              const { data, error } = await supabase
              .from('users')
              .upsert({ line_user_id: userId, name, phone }, { onConflict: ['line_user_id'] });
                if (error) {
                  console.error('Supabase error:', error);
                  return client.replyMessage(event.replyToken, {
                    type: 'text',
                    text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• üò¢ \n‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠admin ‡∏°‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡πà‡∏∞'
                  });
                }
                return client.replyMessage(event.replyToken, {
                  type: 'text',
                  text: `üìå ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏∏‡∏ì ${name} ‡πÄ‡∏ö‡∏≠‡∏£‡πå ${phone} ‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞!`
                });
              }

            if (text.startsWith('üõñ ‡∏ô‡∏±‡∏î‡∏î‡∏π:')) {
              const propertyName = text.split(':')[1].trim();
              await supabase
                .from('users')
                .update({ reservation_property: propertyName })
                .eq('line_user_id', userId);
              return client.replyMessage(event.replyToken, {
                type: 'text',
                text: `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "${propertyName}" ‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞üëá`,
                quickReply: {
                  items: [
                    {
                      type: 'action',
                      action: {
                        type: 'uri',
                        label: 'üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤',
                        uri: `https://liff.line.me/2007520214-3V1lDOWV?house=${encodeURIComponent(propertyName)}`, 
                      },
                    },
                  ],
                },
              });
            }

            if (text.startsWith('üóì ‡∏Ç‡∏≠‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î‡∏î‡∏π‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏£‡∏¥‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå')) {
              const dateMatch = text.match(/‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:\s*(\d{4}-\d{2}-\d{2})/);
              const timeMatch = text.match(/‡πÄ‡∏ß‡∏•‡∏≤:\s*(\d{2}:\d{2})/);

              if (!dateMatch || !timeMatch) {
                return client.replyMessage(event.replyToken, {
                  type: 'text',
                  text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡πà‡∏∞',
                });
              }

              const date = dateMatch[1];
              const time = timeMatch[1];
              const reservationTimestampz = (`${date} ${time}:00`);

              const { data, error } = await supabase
                .from('users')
                .upsert(
                  { line_user_id: userId, reservation: reservationTimestampz },
                  { onConflict: ['line_user_id'] }
                );

              return client.replyMessage(event.replyToken, {
                type: 'text',
                text: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
                quickReply: {
                  items: [
                    {
                      type: 'action',
                      action: {
                        type: 'message',
                        label: '‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
                        text: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏≠‡∏á‡∏î‡∏π‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤',
                      },
                    },
                    {
                      type: 'action',
                      action: {
                        type: 'message',
                        label: '‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
                        text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á',
                      },
                    },
                  ],
                },
              });
            }

            if (event.message.text === '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏≠‡∏á‡∏î‡∏π‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤') {
                return client.replyMessage(event.replyToken, {
                  type: 'text',
                  text: '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞! ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏î‡∏π‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏ô‡πÉ‡∏à‡∏Ñ‡πà‡∏∞ üòä',
                });
              }
            if (event.message.text === '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á') {
              const { error } = await supabase
              .from('users')
              .update({ reservation: null })
              .eq('line_user_id', userId);
                return client.replyMessage(event.replyToken, {
                  type: 'text',
                  text: '‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà ‡∏Å‡∏£‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π "‡∏ô‡∏±‡∏î‡∏î‡∏π‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏£‡∏¥‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå" ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏£‡∏≠‡∏ö‡∏Ñ‡πà‡∏∞ üòä',
                });
              }

            if (text.startsWith('üìã ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°')) {
              const parseFormMessage = (text) => {
                const result = {};
                const phoneRegex = /(\d{9,11}|\d{2,4}-\d{3}-\d{3,4}|\d{2,4} \d{6,8}|\d{3} \d{3} \d{4})/;
                const lines = text.trim().split('\n');
                for (const line of lines) {
                  if (!line.includes(':')) continue;
                  const [rawKey, ...valueParts] = line.split(':');
                  const key = rawKey.trim().replace('üìã ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°', '');
                  const value = valueParts.join(':').trim();
                  if (key && value) result[key] = value;
                }
                const phoneMatch = text.match(phoneRegex);
                if (phoneMatch) {
                  const rawPhone = phoneMatch[1];
                  result['‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£'] = rawPhone.replace(/[-\s]/g, '');
                }
                return result;
              };
              const parsed = parseFormMessage(text);
              const intentValue = parsed['‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ä‡πà‡∏≤']?.includes('‡∏ã‡∏∑‡πâ‡∏≠') ? true : false;
              const payload = {
                line_user_id: userId,
                role: parsed['role'] || null,
                name: [parsed['‡∏ä‡∏∑‡πà‡∏≠'], parsed['‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•']].filter(Boolean).join(' ').trim() || null,
                phone: parsed['‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£'] || null,
                intent: intentValue,
                area_interest: [parsed['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'], parsed['‡∏≠‡∏≥‡πÄ‡∏†‡∏≠']].filter(Boolean).join(' ').trim() || null
              };
              const { data, error } = await supabase
                .from('users')
                .upsert(payload, { onConflict: ['line_user_id'] });

              if (error) {
                console.error('Supabase error:', error);
                return client.replyMessage(event.replyToken, {
                  type: 'text',
                  text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• üò¢ \n‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠ admin ‡∏°‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡πà‡∏∞'
                });
              }
              return client.replyMessage(event.replyToken, {
                type: 'text',
                text: `‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞\n‡∏Ñ‡∏∏‡∏ì ${payload.name}\n‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏≤‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå ${payload.phone}`
              });
            }

          }
        }));
        res.status(200).end();
      } catch (err) {
        console.error(err);
        res.status(500).end();
      }
    };
};

const welcomeFlexMessage = {
  type: 'flex',
  altText: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà LINE Bot ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤!',
  contents: {
    type: 'bubble',
    size: 'mega',
    hero: {
      type: 'image',
      url: 'https://res.cloudinary.com/dxbzwwab6/image/upload/v1748876397/uploads/image.jpg',
      size: 'full',
      aspectRatio: '20:13',
      aspectMode: 'cover'
    },
    body: {
      type: 'box',
      layout: 'vertical',
      spacing: 'md',
      contents: [
        {
          type: 'text',
          text: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏∞ üéâ',
          weight: 'bold',
          size: 'xl'
        },
        {
          type: 'text',
          text: '‡πÄ‡∏£‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏´‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á ‚¨áÔ∏è\n\nüè† ‡∏î‡∏π‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà\nüí¨ ‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ü‡∏£‡∏µ\nüìÑ ‡∏î‡∏π‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô',
          size: 'sm',
          wrap: true,
          color: '#666666'
        }
      ]
    },
    footer: {
      type: 'box',
      layout: 'horizontal',
      spacing: 'md',
      contents: [
        {
          type: 'button',
          style: 'primary',
          color: '#00B900',
          action: {
            type: 'postback',
            label: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏≥‡πÄ‡∏•',
            data: 'action=rayong_area'
          }
        },
        {
          type: 'button',
          style: 'secondary',
          action: {
            type: 'uri',
            label: '‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π',
            uri: 'https://liff.line.me/2007520214-Q2NWqw94'
          }
        }
      ]
    }
  }
};

const RayongFlexMessage = {
  type: 'flex',
  altText: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏≥‡πÄ‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à',
  contents: {
    type: 'bubble',
    size: 'mega',
    body: {
      type: 'box',
      layout: 'vertical',
      spacing: 'md',
      contents: [
        {
          type: 'text',
          text: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡∏ó‡∏≥‡πÄ‡∏•‡πÑ‡∏´‡∏ô?',
          weight: 'bold',
          size: 'xl',
          wrap: true
        },
        {
          type: 'box',
          layout: 'vertical',
          spacing: 'sm',
          contents: [
            {
              type: 'button',
              action: {
                type: 'postback',
                label: '‡∏õ‡∏•‡∏ß‡∏Å‡πÅ‡∏î‡∏á',
                data: 'action=show_property&area=‡∏õ‡∏•‡∏ß‡∏Å‡πÅ‡∏î‡∏á'
              },
              style: 'primary',
              color: '#36B37E'
            },
            {
              type: 'button',
              action: {
                type: 'postback',
                label: '‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á',
                data: 'action=show_property&area=‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏£‡∏∞‡∏¢‡∏≠‡∏á'
              },
              style: 'primary',
              color: '#36B37E'
            },
            {
              type: 'button',
              action: {
                type: 'postback',
                label: '‡∏ö‡πâ‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏¢',
                data: 'action=show_property&area=‡∏ö‡πâ‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏¢'
              },
              style: 'primary',
              color: '#36B37E'
            },
            {
              type: 'button',
              action: {
                type: 'postback',
                label: '‡∏ô‡∏¥‡∏Ñ‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤',
                data: 'action=show_property&area=‡∏ô‡∏¥‡∏Ñ‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤'
              },
              style: 'primary',
              color: '#36B37E'
            },
            {
              type: 'button',
              action: {
                type: 'postback',
                label: '‡∏ö‡πâ‡∏≤‡∏ô‡∏â‡∏≤‡∏á',
                data: 'action=show_property&area=‡∏ö‡πâ‡∏≤‡∏ô‡∏â‡∏≤‡∏á'
              },
              style: 'primary',
              color: '#36B37E'
            },
            {
              type: 'button',
              action: {
                type: 'postback',
                label: '‡∏°‡∏≤‡∏ö‡∏ï‡∏≤‡∏û‡∏∏‡∏î',
                data: 'action=show_property&area=‡∏°‡∏≤‡∏ö‡∏ï‡∏≤‡∏û‡∏∏‡∏î'
              },
              style: 'primary',
              color: '#36B37E'
            }
          ]
        }
      ]
    }
  }
};

const LampangFlexMessage = {
    type: 'flex',
  altText: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏≥‡πÄ‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à',
  contents: {
    type: 'bubble',
    size: 'mega',
    body: {
      type: 'box',
      layout: 'vertical',
      spacing: 'md',
      contents: [
        {
          type: 'text',
          text: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡∏ó‡∏≥‡πÄ‡∏•‡πÑ‡∏´‡∏ô?',
          weight: 'bold',
          size: 'xl',
          wrap: true
        },
        {
          type: 'box',
          layout: 'vertical',
          spacing: 'sm',
          contents: [
            {
              type: 'button',
              action: {
                type: 'postback',
                label: '‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á',
                data: 'action=show_property&area=‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏•‡∏≥‡∏õ‡∏≤‡∏á'
              },
              style: 'primary',
              color: '#36B37E'
            },
          ]
        }
      ]
    }
  }
};

const ConsultMeFlexMessage = {
  type: 'flex',
  altText: '‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ü‡∏£‡∏µ',
  contents: {
    type: 'bubble',
    size: 'mega',
    body: {
      type: 'box',
      layout: 'vertical',
      spacing: 'md',
      contents: [
        {
          type: 'text',
          text: '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏Ñ‡∏£?',
          weight: 'bold',
          size: 'xl',
          wrap: true
        },
        {
          type: 'box',
          layout: 'vertical',
          spacing: 'sm',
          contents: [
            {
              type: 'button',
              action: {
                type: 'postback',
                label:'‡∏Ñ‡∏ô‡∏´‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢',
                data: 'action=consult&role=buyer'
              },
              style: 'primary',
              color: '#36B37E'
            },
            {
              type: 'button',
              action: {
                type: 'postback',
                label:'‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤',
                data: 'action=consult&role=investor'
              },
              style: 'primary',
              color: '#36B37E'
            },
            {
              type: 'button',
              action: {
                type: 'postback',
                label:'Foreign Buyer',
                data: 'action=consult&role=expat_buyer'
              },
              style: 'primary',
              color: '#36B37E'
            },
          ]
        }
      ]
    }
  }
};

const ConsignmentFlexMessage = {
  type: 'flex',
  altText: '‡∏•‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Ç‡∏≤‡∏¢‡∏ö‡πâ‡∏≤‡∏ô',
  contents: {
    type: 'bubble',
    size: 'mega',
    body: {
      type: 'box',
      layout: 'vertical',
      spacing: 'md',
      contents: [
        {
          type: 'text',
          text: '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏Ñ‡∏£?',
          weight: 'bold',
          size: 'xl',
          wrap: true
        },
        {
          type: 'box',
          layout: 'vertical',
          spacing: 'sm',
          contents: [
            {
              type: 'button',
              action: {
                type: 'postback',
                label:'‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå',
                data: 'action=consignmente&role=owner'
              },
              style: 'primary',
              color: '#36B37E'
            },
            {
              type: 'button',
              action: {
                type: 'postback',
                label:'‡∏ô‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤',
                data: 'action=consignmente&role=agent'
              },
              style: 'primary',
              color: '#36B37E'
            },
            {
              type: 'button',
              action: {
                type: 'postback',
                label:'Foreign Seller',
                data: 'action=consignmente&role=foreign_seller'
              },
              style: 'primary',
              color: '#36B37E'
            },
          ]
        }
      ]
    }
  }
};

const LinktreeFlexMessage = {
  type: 'flex',
  altText: '‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏°‡∏ï‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',
  contents: {
    type: 'bubble',
    size: 'mega',
    body: {
      type: 'box',
      layout: 'vertical',
      spacing: 'md',
      contents: [
        {
          type: 'text',
          text: '‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏°‡∏ï‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',
          weight: 'bold',
          size: 'xl',
          wrap: true
        },
        {
          type: 'box',
          layout: 'vertical',
          spacing: 'sm',
          contents: [
            {
              type: 'button',
              action: {
                type: 'uri',
                label: 'linktree',
                uri: 'https://linktr.ee/lumehome.th'
              },
              style: 'primary',
              color: '#36B37E'
            },
          ]
        }
      ]
    }
  }
};