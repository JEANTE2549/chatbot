const fs = require('fs');
const path = require('path');
const line = require('@line/bot-sdk');
const { createClient } = require('@supabase/supabase-js');

const richMenuIds = JSON.parse(
  fs.readFileSync(path.join(__dirname, 'richmenu-ids.json'))
);

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

module.exports = (config) => {
  const client = new line.Client(config);

  async function getPropertiesFromSupabase(area) {
  const { data, error } = await supabase
    .from('house_projects')
    .select('name, price, image_url, detail')
    .ilike('district', `%${area.trim()}%`)
    .limit(10); 
  if (error) {
    console.error('Supabase error:', error);
    return [];
  }

  return data.map(p => ({
    name: p.name,
    price: `‡∏ø${Number(p.price).toLocaleString()}`,
    image: p.image_url ,
    url: p.detail
  }));
}

    return async (req, res) => {
      try {
        await Promise.all(req.body.events.map(async (event) => {
          const userId = event.source.userId;

          if (event.type === 'postback') {
            const data = new URLSearchParams(event.postback.data);
            const action = data.get('action');

            if (action === 'switch_tab') {
              const menu = data.get('menu');
              const newMenuId = richMenuIds[menu];
              if (newMenuId) {
                return client.linkRichMenuToUser(userId, newMenuId);
              }
            }

            if (action === 'rayong_area') {
              return client.replyMessage(event.replyToken, {
                type: 'template',
                altText: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏≥‡πÄ‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à',
                template: { 
                  type: 'buttons',
                  text: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡∏ó‡∏≥‡πÄ‡∏•‡πÑ‡∏´‡∏ô?',
                  actions: [
                    { type: 'postback', label: '‡∏õ‡∏•‡∏ß‡∏Å‡πÅ‡∏î‡∏á', data: 'action=show_property&area=‡∏õ‡∏•‡∏ß‡∏Å‡πÅ‡∏î‡∏á' },
                    { type: 'postback', label: '‡πÄ‡∏°‡∏∑‡∏≠‡∏á', data: 'action=show_property&area=‡πÄ‡∏°‡∏∑‡∏≠‡∏á' }
                  ]
                }
              });
            }

            if (action === 'show_property') {
              const area = data.get('area');
              console.log('User selected area:', area);
              const properties = await getPropertiesFromSupabase(area);
              if (properties.length === 0) {
                return client.replyMessage(event.replyToken, {
                  type: 'text',
                  text: `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà "${area}" ‡∏Ñ‡πà‡∏∞ üè°`
                });
              }
              return client.replyMessage(event.replyToken, {
                type: 'template',
                altText: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô',
                template: {
                  type: 'carousel',
                  columns: properties.map(p => ({
                    thumbnailImageUrl: p.image,
                    title: p.name.slice(0, 40),
                    text: p.price,
                    actions: [
                      { type: 'message', label: '‡∏™‡∏ô‡πÉ‡∏à', text: `‡∏™‡∏ô‡πÉ‡∏à ${p.name}` }
                    ]
                  }))
                }
              });
            }
          }
          
          if (event.type === 'follow') {
            await client.replyMessage(event.replyToken, welcomeFlexMessage);
          }

          if (event.type === 'message' && event.message.type === 'text') {
            const text = event.message.text;
            const userId = event.source.userId;
            const textLower = text.toLowerCase();

            if (textLower.includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ') || text.includes('hello')) {
              return client.replyMessage(event.replyToken, {
                type: 'text',
                text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà LINE Bot ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤! üéâ'
              });
            }
            if (textLower.includes('‡∏™‡∏ô‡πÉ‡∏à')) {
              return client.replyMessage(event.replyToken,InterestFlexMessage);
            }
                        const match = text.match(/‡∏ä‡∏∑‡πà‡∏≠\s*(\S+)\s*‡πÄ‡∏ö‡∏≠‡∏£‡πå\s*(\d{9,10})/);
            if (match) {
              const name = match[1];
              const phone = match[2];

              const { data, error } = await supabase
                .from('users')
                .upsert({ line_user_id: userId, name, phone }, { onConflict: ['line_user_id'] });

              if (error) {
                console.error('Supabase error:', error);
                return client.replyMessage(event.replyToken, {
                  type: 'text',
                  text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• üò¢'
                });
              }

              return client.replyMessage(event.replyToken, {
                type: 'text',
                text: `‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ñ‡∏∏‡∏ì ${name} üì≤ ‡πÄ‡∏ö‡∏≠‡∏£‡πå ${phone} ‡πÄ‡∏£‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö`
              });
            }
          }
        }));

        res.status(200).end();
      } catch (err) {
        console.error(err);
        res.status(500).end();
      }
    };
};

const InterestFlexMessage ={
  "type": "flex",
  "altText": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£",
  "contents": {
    "type": "bubble",
    "hero": {
      "type": "image",
      "url": "https://cdn-icons-png.flaticon.com/512/747/747376.png",
      "size": "full",
      "aspectRatio": "1.51:1",
      "aspectMode": "cover"
    },
    "body": {
      "type": "box",
      "layout": "vertical",
      "spacing": "md",
      "contents": [
        {
          "type": "text",
          "text": "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏∞ üëã",
          "weight": "bold",
          "size": "xl"
        },
        {
          "type": "text",
          "text": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö:",
          "wrap": true,
          "size": "sm",
          "color": "#666666"
        },
        {
          "type": "box",
          "layout": "vertical",
          "backgroundColor": "#f3f4f6",
          "cornerRadius": "md",
          "paddingAll": "12px",
          "contents": [
            {
              "type": "text",
              "text": "‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≤‡∏™ ‡πÄ‡∏ö‡∏≠‡∏£‡πå 0891234567",
              "wrap": true,
              "color": "#111111",
              "size": "md"
            }
          ]
        }
      ]
    },
    "footer": {
      "type": "box",
      "layout": "vertical",
      "spacing": "sm",
      "contents": [
        {
          "type": "button",
          "style": "primary",
          "color": "#1DB446",
          "action": {
            "type": "message",
            "label": "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏¢",
            "text": "‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≤‡∏™ ‡πÄ‡∏ö‡∏≠‡∏£‡πå 0891234567"
          }
        }
      ]
    }
  }
}

const welcomeFlexMessage = {
  type: 'flex',
  altText: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà LINE Bot ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤!',
  contents: {
    type: 'bubble',
    size: 'mega',
    hero: {
      type: 'image',
      url: 'https://res.cloudinary.com/dxbzwwab6/image/upload/v1748876397/uploads/image.jpg',
      size: 'full',
      aspectRatio: '20:13',
      aspectMode: 'cover'
    },
    body: {
      type: 'box',
      layout: 'vertical',
      spacing: 'md',
      contents: [
        {
          type: 'text',
          text: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏∞ üéâ',
          weight: 'bold',
          size: 'xl'
        },
        {
          type: 'text',
          text: '‡πÄ‡∏£‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏´‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á ‚¨áÔ∏è\n\nüè† ‡∏î‡∏π‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà\nüí¨ ‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ü‡∏£‡∏µ\nüìÑ ‡∏î‡∏π‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô',
          size: 'sm',
          wrap: true,
          color: '#666666'
        }
      ]
    },
    footer: {
      type: 'box',
      layout: 'horizontal',
      spacing: 'md',
      contents: [
        {
          type: 'button',
          style: 'primary',
          color: '#00B900',
          action: {
            type: 'postback',
            label: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏≥‡πÄ‡∏•',
            data: 'action=rayong_area'
          }
        },
        {
          type: 'button',
          style: 'secondary',
          action: {
            type: 'uri',
            label: '‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π',
            uri: 'https://res.cloudinary.com/dxbzwwab6/raw/upload/v1748877284/uploads/file'
          }
        }
      ]
    }
  }
};